plugins {
    id "maven-publish"
    id "java"
    id "jacoco"
    // id "findbugs"
    id "idea"
    id 'net.researchgate.release' version '2.4.1'
    id 'org.ajoberstar.grgit' version '1.5.1'
}

repositories {
    mavenCentral()
}

configurations {
    provided
}

ext {
    license = 'Apache-2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    websiteUrl = 'https://github.com/medjed/JsonPathCompiler'
    issueTrackerUrl = 'https://github.com/medjed/JsonPathCompiler/issues'
    vcsUrl = 'https://github.com/medjed/JsonPathCompiler.git'
    githubRepo = 'medjed/JsonPathCompiler'
    grgit = org.ajoberstar.grgit.Grgit.open(project.rootDir)
}

project.ext.set('release.useAutomaticVersion', 'true')

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'net.minidev:json-smart:2.2.1'
    compile 'org.apache.commons:commons-lang3:3.4'

    testCompile 'junit:junit:4.+'
    testCompile 'org.assertj:assertj-core:2.1.0'
    testCompile 'org.slf4j:slf4j-simple:1.7.21'
}

allprojects {
    ext {
        displayName = null
        buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
    }

    group = 'io.github.medjed'
    description = 'Porting from https://github.com/jayway/JsonPath Cut out a PathCompiler.'

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        options.locale = 'en_US'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/octocat/hello-world"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = DELEGATE_FIRST
                        name project.name
                        description project.description
                        url project.vcsUrl
                        scm {
                            url project.vcsUrl
                            connection "scm:git:$project.vcsUrl"
                        }
                        licenses {
                            license {
                                name project.license
                                url project.licenseUrl
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id project.group
                                name project.group
                            }
                        }
                    }
                }
            }
        }
    }
}

task classpath(type: Copy, dependsOn: ["jar"]) {
    doFirst { file("classpath").deleteDir() }
    from(configurations.provided + files(jar.archivePath))
    into "classpath"
}

task generateJavadoc(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    destinationDir = file("docs")
}

task(commitJavadoc, dependsOn: generateJavadoc) << {
    grgit.add(patterns: ['docs'])
    grgit.commit(message: "Add javadoc " + version)
}

afterReleaseBuild.dependsOn commitJavadoc

clean { delete "classpath" }
